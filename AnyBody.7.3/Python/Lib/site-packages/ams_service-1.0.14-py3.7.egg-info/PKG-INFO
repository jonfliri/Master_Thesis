Metadata-Version: 1.1
Name: ams-service
Version: 1.0.14
Summary: Python module providing API for thrift AMS connection
Home-page: UNKNOWN
Author: ['Rune Lund Olesen', 'Ioan-Matei Sarivan']
Author-email: ['rlo@anybodytech.com', 'ms@anybodytech.com']
License: UNKNOWN
Description: # AMS Service
        > Python module providing API for thrift communication with AMS
        
        ams_service is a an application programming interface designed for exchanging
        data between custom made Python modules or applications and AnyBody Modelling
        System. A set of methods is therefore available which enables the Python
        developer to send commands to AMS like loading a certain model, save a certain
        file opened in the AMS editor, query the AMS environment for define statements,
        path statements etc.
        
        To make use of the methods available in this API, the developer needs to create
        a 'Connection' object by specifying the thrift port on which data will be
        exchanged and the ID of the plugin generated by AMS. The thrift port and the
        plugin ID are passed as arguments to the python application at startup.
        
        * port: `sys.argv[2]`
        * ID: `sys.argv[4]`
        
        
        
        
        
        ## Getting the port and ID while debugging
        
        While debugging it can be usefull to open a connection to AMS. This can be 
        done with a dummy `AnyGUIPlugin` class. 
        
        ```
         AnyGUIPlugin Dummy = {
           PluginFile = "None";
           Interactive = On;
           DisplayName = "Dummy plugin";
           ToolTip = "";
         };    
        ```
        
        Load the model and click the "Dummy plugin" button on the toolbar. This 
        will open a Python terminal reporting an error that Python can't locate the
        plugin file. Now run the following command:
        
        ```
        >>> import sys; print(f"port: {sys.argv[2]}\nID: {sys.argv[4]}")
        port: 62171
        ID: f6c45a974413e15caa452577b243ce91c199e0a1
        ```
        Now those values can be used for testing the interface. Just keep the Python 
        console open. 
        
        
        ## Example of using the interface.
        
        **Establishing connection:**
        
        ``` 
        >>> from ams_service.thriftapi import Connection
        >>> port = sys.argv[2] # Provided by AMS when starting the plugin
        >>> cid = sys.argv[4] # Provided by AMS when starting the plugin
        >>> ams_interface = Connection(port, cid) 
        Connected on port: 46572
        >>> ams_interface.get_initialization_parameters()
        {'DisplayName': 'Main.HumanModel: NewPlugin',
         'Extra': 'Main.HumanModel.Config.NewPlugin',
         'PluginFile': 'C:\\Users\\ms\\Documents\\new_plugin\\__init__.py'
        }
        ```
        
        **Reading define/path variables**
        ```
        >>> paths = ams_interface.get_paths()
        >>> paths['__BM_PLUGIN_FILE__']
        'C:\\Users\\ms\\Documents\\usethis\\Model\\BodyModelConfiguration.any'
        >>> defines = ams_interface.get_defines()
        >>> defines['BM_LEG_MODEL']
        '_LEG_MODEL_TLEM2_'
        ```
        
        **Getting data**
        ```
        >>> ams_interface.get_data('Main.Matrix')
        array([[1., 2., 3.],
               [4., 5., 6.]])
        >>> a = ams_interface.get_data('Main.Matrix')
        >>> a.dtype
        dtype('float64')
        ```
        
        
        
        
        
        
        
        
        
            
Keywords: ams_service
Platform: UNKNOWN
Classifier: Development Status :: Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
