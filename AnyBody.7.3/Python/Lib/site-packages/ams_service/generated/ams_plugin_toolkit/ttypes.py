#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ANYDATAVTYPES(object):
    INT = 0
    FLOAT = 1
    STRING = 2
    SWITCH = 3
    ENUM_STRING = 4
    PATH_STRING = 5
    OBJECT_PTR_STRING = 6

    _VALUES_TO_NAMES = {
        0: "INT",
        1: "FLOAT",
        2: "STRING",
        3: "SWITCH",
        4: "ENUM_STRING",
        5: "PATH_STRING",
        6: "OBJECT_PTR_STRING",
    }

    _NAMES_TO_VALUES = {
        "INT": 0,
        "FLOAT": 1,
        "STRING": 2,
        "SWITCH": 3,
        "ENUM_STRING": 4,
        "PATH_STRING": 5,
        "OBJECT_PTR_STRING": 6,
    }


class PluginIDUnavailable(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PluginIDUnavailable')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidInput(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InvalidInput')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Error(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Error')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnyData_VType(object):
    """
    Attributes:
     - any_switch
     - any_int
     - any_float
     - any_string
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'any_switch', None, None, ),  # 1
        None,  # 2
        (3, TType.I32, 'any_int', None, None, ),  # 3
        (4, TType.DOUBLE, 'any_float', None, None, ),  # 4
        (5, TType.STRING, 'any_string', 'UTF8', None, ),  # 5
    )

    def __init__(self, any_switch=None, any_int=None, any_float=None, any_string=None,):
        self.any_switch = any_switch
        self.any_int = any_int
        self.any_float = any_float
        self.any_string = any_string

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.any_switch = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.any_int = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.any_float = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.any_string = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnyData_VType')
        if self.any_switch is not None:
            oprot.writeFieldBegin('any_switch', TType.BOOL, 1)
            oprot.writeBool(self.any_switch)
            oprot.writeFieldEnd()
        if self.any_int is not None:
            oprot.writeFieldBegin('any_int', TType.I32, 3)
            oprot.writeI32(self.any_int)
            oprot.writeFieldEnd()
        if self.any_float is not None:
            oprot.writeFieldBegin('any_float', TType.DOUBLE, 4)
            oprot.writeDouble(self.any_float)
            oprot.writeFieldEnd()
        if self.any_string is not None:
            oprot.writeFieldBegin('any_string', TType.STRING, 5)
            oprot.writeString(self.any_string.encode('utf-8') if sys.version_info[0] == 2 else self.any_string)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnyData_VType_List(object):
    """
    Attributes:
     - any_switch_list
     - any_int_list
     - any_float_list
     - any_string_list
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'any_switch_list', (TType.BOOL, None, False), None, ),  # 1
        (2, TType.LIST, 'any_int_list', (TType.I32, None, False), None, ),  # 2
        (3, TType.LIST, 'any_float_list', (TType.DOUBLE, None, False), None, ),  # 3
        (4, TType.LIST, 'any_string_list', (TType.STRING, 'UTF8', False), None, ),  # 4
    )

    def __init__(self, any_switch_list=None, any_int_list=None, any_float_list=None, any_string_list=None,):
        self.any_switch_list = any_switch_list
        self.any_int_list = any_int_list
        self.any_float_list = any_float_list
        self.any_string_list = any_string_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.any_switch_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readBool()
                        self.any_switch_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.any_int_list = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.any_int_list.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.any_float_list = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.any_float_list.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.any_string_list = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.any_string_list.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnyData_VType_List')
        if self.any_switch_list is not None:
            oprot.writeFieldBegin('any_switch_list', TType.LIST, 1)
            oprot.writeListBegin(TType.BOOL, len(self.any_switch_list))
            for iter24 in self.any_switch_list:
                oprot.writeBool(iter24)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.any_int_list is not None:
            oprot.writeFieldBegin('any_int_list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.any_int_list))
            for iter25 in self.any_int_list:
                oprot.writeI32(iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.any_float_list is not None:
            oprot.writeFieldBegin('any_float_list', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.any_float_list))
            for iter26 in self.any_float_list:
                oprot.writeDouble(iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.any_string_list is not None:
            oprot.writeFieldBegin('any_string_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.any_string_list))
            for iter27 in self.any_string_list:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnyDataObject(object):
    """
    Attributes:
     - AnyVarType
     - value
     - array
     - dimensions
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'AnyVarType', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (AnyData_VType, AnyData_VType.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'array', (AnyData_VType_List, AnyData_VType_List.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'dimensions', (TType.I64, None, False), None, ),  # 4
    )

    def __init__(self, AnyVarType=None, value=None, array=None, dimensions=None,):
        self.AnyVarType = AnyVarType
        self.value = value
        self.array = array
        self.dimensions = dimensions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.AnyVarType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = AnyData_VType()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.array = AnyData_VType_List()
                    self.array.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dimensions = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readI64()
                        self.dimensions.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnyDataObject')
        if self.AnyVarType is not None:
            oprot.writeFieldBegin('AnyVarType', TType.I32, 1)
            oprot.writeI32(self.AnyVarType)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.array is not None:
            oprot.writeFieldBegin('array', TType.STRUCT, 3)
            self.array.write(oprot)
            oprot.writeFieldEnd()
        if self.dimensions is not None:
            oprot.writeFieldBegin('dimensions', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.dimensions))
            for iter34 in self.dimensions:
                oprot.writeI64(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnyObject(object):
    """
    Attributes:
     - completeName
     - reference_completeName
     - data
     - isFolder
     - ams_typename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'completeName', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'reference_completeName', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'data', (AnyDataObject, AnyDataObject.thrift_spec), None, ),  # 3
        (4, TType.BOOL, 'isFolder', None, None, ),  # 4
        (5, TType.STRING, 'ams_typename', 'UTF8', None, ),  # 5
    )

    def __init__(self, completeName=None, reference_completeName=None, data=None, isFolder=None, ams_typename=None,):
        self.completeName = completeName
        self.reference_completeName = reference_completeName
        self.data = data
        self.isFolder = isFolder
        self.ams_typename = ams_typename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.completeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reference_completeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.data = AnyDataObject()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isFolder = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ams_typename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnyObject')
        if self.completeName is not None:
            oprot.writeFieldBegin('completeName', TType.STRING, 1)
            oprot.writeString(self.completeName.encode('utf-8') if sys.version_info[0] == 2 else self.completeName)
            oprot.writeFieldEnd()
        if self.reference_completeName is not None:
            oprot.writeFieldBegin('reference_completeName', TType.STRING, 2)
            oprot.writeString(self.reference_completeName.encode('utf-8') if sys.version_info[0] == 2 else self.reference_completeName)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 3)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        if self.isFolder is not None:
            oprot.writeFieldBegin('isFolder', TType.BOOL, 4)
            oprot.writeBool(self.isFolder)
            oprot.writeFieldEnd()
        if self.ams_typename is not None:
            oprot.writeFieldBegin('ams_typename', TType.STRING, 5)
            oprot.writeString(self.ams_typename.encode('utf-8') if sys.version_info[0] == 2 else self.ams_typename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.completeName is None:
            raise TProtocolException(message='Required field completeName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnyObjectResult(object):
    """
    Attributes:
     - Object
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'Object', (AnyObject, AnyObject.thrift_spec), None, ),  # 1
    )

    def __init__(self, Object=None,):
        self.Object = Object

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.Object = AnyObject()
                    self.Object.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnyObjectResult')
        if self.Object is not None:
            oprot.writeFieldBegin('Object', TType.STRUCT, 1)
            self.Object.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
