# -*- coding: utf-8 -*-
"""

AMS THRIFTAPI is a an application programming interface designed for exchanging data between
custom made Python modules or applications and AnyBody Modelling System. A set of methods is
therefore available which enables the Python developer to send commands to AMS like loading
a certain model, save a certain file opened in the AMS editor, query the AMS environment for
define statements, path statements etc.

To make use of the methods available in this API, the developer needs to create a 'Connection'
object by specifying the thrift port on which data will be exchanged and the ID of the plugin
generated by AMS. The thrift port and the plugin ID are passed as arguments to the python
application at startup.

Author: Ioan-Matei Sarivan @ AnyBody Technology A/S
E-mail: ms@anybodytech.com

Created on Wed Feb 14 09:25:18 2018

"""
import argparse
from typing import Dict, List, Optional, Tuple

import thrift.transport.TTransport
from thrift.Thrift import TApplicationException
import numpy as np

from . import plugin
from .generated.ams_plugin_toolkit.ttypes import AnyData_VType, AnyData_VType_List


class Connection:
    """
    Instantiate to establish the thrift communication with AMS.
    Available methods:

    """

    def __init__(
        self, plugin_port: Optional[int] = None, plugin_id: Optional[str] = None
    ) -> None:
        """
        :param plugin_port:
        :param plugin_id:
        """
        if plugin_port is None or plugin_id is None:
            plugin_port, plugin_id = self._parse_arguments()

        self.__port = plugin_port
        self.__ID = plugin_id

        self.__connection_failed = (
            f"The connection on port: {self.__port!s} is not available anymore"
        )

        self.__connect()
        self.__query_configuration_folder()
        self.__query_paths()
        self.__query_defines()

    def _parse_arguments(self) -> Tuple[int, str]:
        parser = argparse.ArgumentParser()
        parser.add_argument("-p", "--plugin_port")
        parser.add_argument("-id", "--plugin_id")
        args = parser.parse_args()
        return (args.plugin_port, args.plugin_id)

    def __connect(self) -> bool:
        """Return True if connection established, False if failed.

        Attempts connection on the known port.
        If connection failed, try to change the port using the
        @method set_port(port).

        """
        try:
            plugin.connect(self.__port)
            print("Connected on port: " + str(self.__port))
            self.__connected = True
            self.__query_configuration_folder()
            return True
        except thrift.transport.TTransport.TTransportException:
            print("Failed to connect on port: " + str(self.__port))
            self.__connected = False
            return False

    def __query_license_info(self) -> None:
        """Raises exception if the maintanence license is expired"""

        lic_exp = plugin.LicenseServiceInterface().IsMaintenanceExpired()
        if lic_exp:
            print("Maintanence license expired! Contact your AnyBody supplier.")

    def __query_configuration_folder(self) -> None:
        """Sets the path to directory containing the .main.any file."""

        if not self.__connected:
            print("Not connected!")

        try:
            d = plugin.BodyModelPluginInterface().GetConfigurationFolder()
            self.__configuration_folder = d
        except ConnectionResetError:
            self.__configuration_folder = None
            self.__connected = False
            print(self.__connection_failed)

    def __query_paths(self) -> bool:
        """Sets dictionary containing environment paths accessible by their path name.
        Dictionary accessible with @method get_paths().
        """
        if not self.__connected:
            print("Not connected!")
            return False

        try:
            self.__paths = plugin.PluginInfoServiceInterface().GetLoadPaths(self.__ID)
            return True

        except ConnectionResetError:
            print(self.__connection_failed)
            return False
        except TApplicationException:
            print("AnyBody is not running or no model is loaded!")
            return False

    def __query_defines(self) -> bool:
        """Sets dictionary containing environment defines accessible by their define name.
        Dictionary accessible with @method get_defines().
        """

        if not self.__connected:
            print("Not connected!")
            return False

        try:
            self.__defines = plugin.PluginInfoServiceInterface().GetLoadDefines(
                self.__ID
            )
            return True
        except ConnectionResetError:
            print(self.__connection_failed)
            return False
        except TApplicationException:
            print("No main loaded")
            return False

    def get_lic_days_left(self) -> int:
        """Return number of days left until maintenance license expiration (integer)
        
        Example 1
        ---------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> days = ams_inteface.get_lic_days_left()
        175
        
        Example 2
        ---------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> days = ams_inteface.get_lic_days_left()
        -2
        >>> # The license expired two days ago
        
        """
        d = plugin.LicenseServiceInterface().GetDaysToMaintenanceExpiration()
        return d

    def get_lic_id(self) -> str:
        """Return maintenance license id (string)
        
        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> days = get_lic_id()
        'amsall1_trial'

        """
        lic = plugin.LicenseServiceInterface().GetLicenseProductTypeID()
        return lic

    def get_lic_status(self) -> bool:
        """Return maintenance license status (bool)

        Example 1
        ---------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> days = ams_inteface.get_lic_status()
        False
        >>> # The license is still active
        
        Example 2
        ---------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> days = ams_inteface.get_lic_status()
        True
        >>> # The license is expired

        """ 
        s = plugin.LicenseServiceInterface().IsMaintenanceExpired()
        return s

    def get_configuration_folder(self, query: bool = False) -> str:
        """Return directory path containing the loaded .main.any file.
        
        Parameters
        ----------
        query: int
            If set to True, ams_service will receive refreshed data from AMS.
            It might take a few seconds.
        
        """
        if query: self.__query_configuration_folder()
        return self.__configuration_folder

    def set_port(self, port: int) -> None:
        """Set new communication port with AMS

        Parameters
        ----------
        port: int
            The port number is generated by AMS. Consult documentation for more details.

        """
        self.__port = port

    def set_id(self, plugin_id: str) -> None:
        """Set new communication port with AMS

        Parameters
        ----------
        plugin_id: str
            The plugin ID is generated by AMS. Consult documentation for more details.

        """

        self.__ID = plugin_id

    def get_initialization_parameters(self, plugin_id: str = "") -> Dict[str, str]:
        """Return dictionary with initialisation parameters.

        Parameters
        ----------
        plugin_id: str, optional
            The plugin ID generated by AMS.

        Example
        -------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_initialization_parameters()
        {'DisplayName': 'Main.HumanModel: NewPlugin', 'Extra': 'Main.HumanModel.Config.NewPlugin',
         'PluginFile': 'C:\\Users\\ms\\Documents\\new_plugin\\__init__.py'}
        >>> parameters = ams_interface.get_initialization_parameters()
        >>> parameters['DisplayName']
        'Main.HumanModel: NewPlugin'

        """
        if plugin_id == "":
            plugin_id = self.__ID
        return plugin.PluginInfoServiceInterface().GetStringProperties(plugin_id)

    def get_port(self) -> int:
        """Return current AMS connection port"""
        return self.__port

    def get_paths(self, query: bool = False) -> Dict[str, str]:
        """Return dictionary containing defines paths in the AMS environment

        Parameters
        ----------
        query: int
            If set to True, ams_service will receive refreshed data from AMS.
            It might take a few seconds.

        Example
        -------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> paths = ams_interface.get_paths()
        >>> paths['__BM_PLUGIN_FILE__']
        'C:\\Users\\ms\\Documents\\usethis\\Model\\BodyModelConfiguration.any'

        """
        if query: self.__query_paths()
        return self.__paths

    def get_defines(self, query: bool = False) -> Dict[str, str]:
        """Return dictionary containing defines paths in the AMS environment

        Parameters
        ----------
        query: int
            If set to True, ams_service will receive refreshed data from AMS.
            It might take a few seconds.

        Example
        -------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> defines = ams_interface.get_defines()
        >>> defines['BM_LEG_MODEL']
        '_LEG_MODEL_TLEM2_'

        """
        if query: self.__query_defines()
        return self.__defines

    def get_define(self, define: str, query: bool = False) -> str:
        """Return the value of the define with the passed name

        Parameters
        ----------

        define: str
            Name of the define for which the value is desired
        query: int
            If set to True, ams_service will receive refreshed data from AMS.
            It might take a few seconds.

        Example
        -------

        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_define('BM_LEG_MODEL')
        '_LEG_MODEL_TLEM2_'

        """
        if query: self.__query_defines()
        return self.__defines[define]

    def load_model(self, main_file: str = "") -> int:
        """Sends load command to AMS

        RETURN CODE 0: No connection with AMS
        RETURN CODE 1: Model load succeed
        RETURN CODE 2: Model load failed

        Parameters
        ----------
        main_file: str, optional
            Path to desired main file to be loaded. If left empty, the last loaded maine file will be loaded.

        Example 1
        ---------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.load_model()
        Successfully loaded model.
        1

        Example 2
        ---------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.load_model()
        Failed to load the model
        2

        """
        if main_file == "":
            main_file = self.get_main_file
            if not main_file:
                return 0

        try:
            if plugin.ModelInterface().LoadModel(main_file):
                print("Successfully loaded model.")
                return 1
            else:
                print("Failed to load the model")
                return 2
        except ConnectionResetError:
            print("Connection Reset Error")
            return 0

    def is_connected(self) -> bool:
        """Return last known connection status with AMS."""
        return self.__connected

    def save_main_file(self) -> None:
        """Send command to AMS for saving the loaded main file if edited."""
        main_file = self.get_main_file
        plugin.AMSInterface().SaveBuffer(main_file)

    def reload_main_file(self) -> None:
        """Send command to AMS for refreshing the main file if edited externally.
        Not to be confused with model loading.
        """
        main_file = self.get_main_file
        plugin.AMSInterface().ReloadFileInBackground(main_file)

    def __get_value(self, name: str) -> AnyData_VType:
        # Queries for the value of the given variable name.

        if not self.__connected:
            print("Not connected!")
            return AnyData_VType()

        try:
            return plugin.ModelInterface().GetAnyObject(name).Object.data.value

        except ConnectionResetError:
            print(self.__connection_failed)
            return AnyData_VType()
        except TApplicationException:
            print("No main loaded")
            return AnyData_VType()
        except AttributeError:
            print("No data")
            return AnyData_VType()
        except EOFError:
            print("Corrupted data")
            self.__connect()
            return AnyData_VType()

    def get_data(self, name: str):
        """Returns the value of the define with the passed name

        Parameters
        ----------

        name: str
            Name of the variable for which the data is desired

        Example
        -------

        >>> from ams_service import Connection
        >>> p=Connection(18903, 'c1fc24256f0e7261b470c3ca9b72511b7486605a')
        Connected on port: 18903

        >>> # float data
        >>> p.get_data('Main.HumanModel.Anthropometrics.BMI')
        25.413223140495862
        >>> type(p.get_data('Main.HumanModel.Anthropometrics.BMI'))
        <class 'float'>

        >>> # float 2 dimensions array
        >>> p.get_data('Main.Matrix')
        array([[1., 2., 3.],
               [4., 5., 6.]])
        >>> a = p.get_data('Main.Matrix')
        >>> a.dtype
        dtype('float64')

        >>> # int 1 dimension array
        >>> a = p.get_data('Main.Array')
        >>> a
        array([1, 2, 3, 4, 5, 6])
        >>> a.dtype
        dtype('int32')

        >>> # switch data
        >>> a = p.get_data('Main.DrawSettings.Muscle.DrawScaleOnOff')
        >>> a
        False
        >>> type(a)
        <class 'bool'>

        """
        if not self.__connected:
            print("Not connected!")
            return AnyData_VType()

        try:
            data = plugin.ModelInterface().GetAnyObject(name).Object.data

        except ConnectionResetError:
            print(self.__connection_failed)
            return AnyData_VType()
        except TApplicationException:
            print("No main loaded")
            return AnyData_VType()
        except AttributeError:
            print("No data")
            return AnyData_VType()
        except EOFError:
            print("Corrupted data")
            self.__connect()
            return AnyData_VType()

        data_dimension = data.dimensions
        if not data_dimension:
            values = [
                data.value.any_int,
                data.value.any_string,
                data.value.any_switch,
                data.value.any_float,
            ]

            for value in values:
                if value is not None:
                    return value
            else:
                raise TypeError(
                    "The AnyData variable does not contain any data. The name of the variable is: "
                    + name
                )
        elif len(data_dimension) == 1:
            values = [
                data.array.any_int_list,
                data.array.any_string_list,
                data.array.any_switch_list,
                data.array.any_float_list,
            ]

            for alist in values:
                if alist is not None:
                    return np.array(alist)
            else:
                raise TypeError(
                    "The AnyData variable does not contain any data. The name of the variable is: "
                    + name
                )
        else:
            values = [
                data.array.any_int_list,
                data.array.any_string_list,
                data.array.any_switch_list,
                data.array.any_float_list,
            ]

            for alist in values:
                if alist is not None:
                    matrix = np.array(alist).reshape(data_dimension)

                    return matrix
            else:
                raise TypeError(
                    "The AnyData variable does not contain any data. The name of the variable is: "
                    + name
                )

    def get_float(self, name: str) -> float:
        """Return the float value of the variable with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the float variable for which the value is required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_float('Main.HumanModel.Anthropometrics.BMI')
        25.413223140495862

        """

        any_var = self.__get_value(name)
        values = [
            any_var.any_int,
            any_var.any_string,
            any_var.any_switch,
            any_var.any_float,
        ]

        for value in values:
            if value is not None and type(value) == float:
                return value
        else:
            raise TypeError(
                "The AnyData variable does not contain a float. The name of the variable is: "
                + name
            )

    def get_int(self, name: str) -> int:
        """Return the int value of the variable with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the int variable for which the value is required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_int('Main.Model.EnvironmentModel.GlobalRef.UpdConfig')
        1

        """

        any_var = self.__get_value(name)
        values = [
            any_var.any_int,
            any_var.any_string,
            any_var.any_switch,
            any_var.any_float,
        ]

        for value in values:
            if value is not None and type(value) == int:
                return value
        else:
            raise TypeError(
                "The AnyData variable does not contain a int. The name of the variable is: "
                + name
            )

    def get_string(self, name: str) -> str:
        """Return the string value of the variable with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the string variable for which the value is required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_string('Main.Study.Kinematics.SolverType')
        'KinSolDeterminate'

        """

        any_var = self.__get_value(name)
        values = [
            any_var.any_int,
            any_var.any_string,
            any_var.any_switch,
            any_var.any_float,
        ]

        for value in values:
            if value is not None and type(value) == str:
                return value
        else:
            raise TypeError(
                "The AnyData variable does not contain a str. The name of the variable is: "
                + name
            )

    def get_switch(self, name: str) -> bool:
        """Return the bool value of the variable with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the bool variable for which the value is required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_switch('Main.DrawSettings.Muscle.DrawScaleOnOff')
        False

        """

        any_var = self.__get_value(name)
        values = [
            any_var.any_int,
            any_var.any_string,
            any_var.any_switch,
            any_var.any_float,
        ]

        for value in values:
            if value is not None and type(value) == bool:
                return value
        else:
            raise TypeError(
                "The AnyData variable does not contain a bool. The name of the variable is: "
                + name
            )

    def __get_list(self, name: str) -> AnyData_VType_List:
        # Queries for the values of the given list name.

        if not self.__connected:
            print("Not connected!")
            return AnyData_VType_List()

        try:
            return plugin.ModelInterface().GetAnyObject(name).Object.data.array

        except ConnectionResetError:
            print(self.__connection_failed)
            return AnyData_VType_List()
        except TApplicationException:
            print("No main loaded")
            return AnyData_VType_List()
        except AttributeError:
            print("No data")
            return AnyData_VType_List()
        except EOFError:
            print("Corrupted data")
            self.__connect()
            return AnyData_VType_List()

    def get_float_list(self, name: str) -> List[float]:
        """Return the values of the float list with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the float list for which the values are required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_float_list('Main.DrawSettings.Muscle.RGBColorScale')
        [0.957031, 0.785156, 0.785156]

        """

        any_var = self.__get_list(name)
        values = [
            any_var.any_int_list,
            any_var.any_string_list,
            any_var.any_switch_list,
            any_var.any_float_list,
        ]

        for float_list in values:
            if float_list is not None and type(float_list[0]) == float:
                return float_list
        else:
            raise TypeError(
                "The AnyData variable does not contain a float list. The name of the variable is: "
                + name
            )

    def get_int_list(self, name: str) -> List[int]:
        """Return the values of the int list with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the int list for which the values are required.

        """

        any_var = self.__get_list(name)
        values = [
            any_var.any_int_list,
            any_var.any_string_list,
            any_var.any_switch_list,
            any_var.any_float_list,
        ]

        for int_list in values:
            if int_list is not None and type(int_list[0]) == int:
                return int_list
        else:
            raise TypeError(
                "The AnyData variable does not contain a int list. The name of the variable is: "
                + name
            )

    def get_string_list(self, name: str) -> List[str]:
        """Return the values of the string list with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the string list for which the values are required.

        Example
        -------
        >>> from ams_service import Connection
        >>> ams_interface = Connection(46572, 'c1fc24256f0e7261b470c3ca9b72511b7486605a') #random port and ID
        Connected on port: 46572
        >>> ams_interface.get_string_list('Main.Model.ModelEnvironmentConnection.Drivers.CoMDriver.CType')
        ['Hard', 'Hard']

        """

        any_var = self.__get_list(name)
        values = [
            any_var.any_int_list,
            any_var.any_string_list,
            any_var.any_switch_list,
            any_var.any_float_list,
        ]

        for str_list in values:
            if str_list is not None and type(str_list[0]) == str:
                return str_list
        else:
            raise TypeError(
                "The AnyData variable does not contain a str list. The name of the variable is: "
                + name
            )

    def get_switch_list(self, name: str) -> List[bool]:
        """Return the values of the bool list with the passed name.

        Parameters
        ---------
        name: str
            Complete name of the bool list for which the values are required.

        """

        any_var = self.__get_list(name)
        values = [
            any_var.any_int_list,
            any_var.any_string_list,
            any_var.any_switch_list,
            any_var.any_float_list,
        ]

        for bool_list in values:
            if bool_list is not None and type(bool_list[0]) == bool:
                return bool_list
        else:
            raise TypeError(
                "The AnyData variable does not contain a bool list. The name of the variable is: "
                + name
            )

    @staticmethod
    def save_file(file_path: str) -> None:
        """Send command to AMS to save the file located at the path passed through parameter.

        Parameters
        ----------

        file_path: str
            Path of the file to be saved

        """
        plugin.AMSInterface().SaveBuffer(file_path)
        return True

    @staticmethod
    def reload_file(file_path: str) -> None:
        """Send command to AMS to refresh the file located at the path passed through parameter.
        Not to be confused with model load.

        Parameters
        ----------

        file_path: str
            Path of the file to be refreshed

        """
        plugin.AMSInterface().ReloadFileInBackground(file_path)

    @staticmethod
    def load_operation(op_name: str, stop_current_op: bool = False) -> bool:
        """Send command to AMS to start the operation with the passed name.

        Parameters
        ----------

        op_name: str
            Name of the operation to be started.
        stop_current_op: str, optional
            Stop the operation currently running.

        """

        try:
            plugin.AMSCompoundInterface().SelectAndRunOperation(
                op_name, stop_current_op
            )
            return True
        except ConnectionResetError:
            print("Connection error")
            return False
        except TApplicationException:
            print("No main loaded")
            return False

    @property
    def get_main_file(self) -> str:
        """Return the path of the .main.any file currently loaded in AMS."""

        return self.__defines["ANYBODY_PATH_MAINFILE"]

