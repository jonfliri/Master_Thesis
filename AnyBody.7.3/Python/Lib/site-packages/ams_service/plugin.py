import sys

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TMultiplexedProtocol

from .generated.ams_plugin_toolkit import ttypes
from .generated.ams_plugin_toolkit import AMSService
from .generated.ams_plugin_toolkit import ModelService
from .generated.ams_plugin_toolkit import AMSCompoundService
from .generated.ams_plugin_toolkit import BodyModelPluginService
from .generated.ams_plugin_toolkit import PluginInfoService
from .generated.ams_plugin_toolkit import LicenseService

this = sys.modules[__name__]

this._AMSInterface = None
this._ModelInterface = None
this._AMSCompoundInterface = None
this._BodyModelPluginInterface = None
this._PluginInfoService = None
this._LicenseService = None


def connect(port):
    # Make socket
    socket = TSocket.TSocket('::1', port)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TFramedTransport(socket)
    
    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)
    
    AMSService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "AMSService")
    ModelService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "ModelService")
    AMSCompoundService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "AMSCompoundService")
    BodyModelPluginService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "BodyModelPluginService")
    PluginInfoService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "PluginInfoService") 
    LicenseService_protocol = TMultiplexedProtocol.TMultiplexedProtocol(protocol, "LicenseService")
    
    # Create a client to use the protocol encoder
    this._AMSInterface = AMSService.Client(AMSService_protocol)
    this._ModelInterface = ModelService.Client(ModelService_protocol)
    this._AMSCompoundInterface = AMSCompoundService.Client(AMSCompoundService_protocol)
    this._BodyModelPluginInterface = BodyModelPluginService.Client(BodyModelPluginService_protocol)
    this._PluginInfoServiceInterface = PluginInfoService.Client(PluginInfoService_protocol)
    this._LicenseService = LicenseService.Client(LicenseService_protocol)

    
    # Connect!
    transport.open()
    
def AMSInterface() -> AMSService.Client:
    return this._AMSInterface
    
def ModelInterface() -> ModelService.Client:
    return this._ModelInterface

def AMSCompoundInterface() -> AMSCompoundService.Client:
    return this._AMSCompoundInterface
    
def BodyModelPluginInterface() -> BodyModelPluginService.Client:
    return this._BodyModelPluginInterface
    
def PluginInfoServiceInterface() -> PluginInfoService.Client:
    return this._PluginInfoServiceInterface

def LicenseServiceInterface() -> LicenseService.Client:
    return this._LicenseService


    
